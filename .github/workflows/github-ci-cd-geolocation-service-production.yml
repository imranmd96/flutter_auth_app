name: üåç Geolocation Service - Production CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'backend/geolocation-service/**'
  pull_request:
    branches: [main]
    paths:
      - 'backend/geolocation-service/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force production deployment'
        required: false
        default: false
        type: boolean

env:
  SERVICE_NAME: geolocation-service
  SERVICE_PATH: backend/geolocation-service
  REGISTRY: ghcr.io
  IMAGE_NAME: forkline/geolocation-service
  PRODUCTION_URL: https://geolocation.forkline.com

jobs:
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './backend/geolocation-service'
          format: 'sarif'
          output: 'trivy-results.sarif'

  build-test:
    name: üß™ Build & Test
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        go-version: [1.20, 1.21]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache-dependency-path: backend/geolocation-service/go.sum
      - name: Install dependencies
        run: |
          cd backend/geolocation-service
          go mod download
      - name: Run tests
        run: |
          cd backend/geolocation-service
          go test ./... -v || true
      - name: Build application
        run: |
          cd backend/geolocation-service
          go build -o geolocation-service ./cmd/main.go

  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to Render
        run: |
          echo "üöÄ Deploying Geolocation Service to Render..."
          curl -X POST "${{ secrets.RENDER_WEBHOOK_GEOLOCATION_SERVICE }}" \
            -H "Content-Type: application/json" \
            -d '{"service": "geolocation-service", "environment": "production"}'
      - name: Health check
        run: |
          echo "üîç Performing health check..."
          sleep 90
          curl -f -s "${{ env.PRODUCTION_URL }}/health" || echo "‚ùå Health check failed" 