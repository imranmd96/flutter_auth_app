name: 'GitHub CI/CD: Notification Service - Production'

on:
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: 'false'
        type: string
  push:
    branches: [ main ]
    paths:
      - 'backend/notification-service/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/notification-service/**'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: forkline
  PRODUCTION_DOMAIN: forkline.com

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: backend/notification-service/package-lock.json
          
      - name: Install dependencies
        run: |
          cd backend/notification-service
          npm ci
          
      - name: Run tests
        run: |
          cd backend/notification-service
          npm test || echo "No tests found"
          
      - name: Run linting
        run: |
          cd backend/notification-service
          npm run lint || echo "No linting configured"

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'backend/notification-service'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: backend/notification-service
          file: backend/notification-service/Dockerfile.prod
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_PREFIX }}-notification-service:latest
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_PREFIX }}-notification-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Deploy to Railway
        uses: bervProject/railway-deploy@main
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: notification-service
          variables: |
            DOCKER_IMAGE=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_PREFIX }}-notification-service:${{ github.sha }}
            NODE_ENV=production
            PRODUCTION_DOMAIN=${{ env.PRODUCTION_DOMAIN }}
            
      - name: Health check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if curl -f --max-time 10 "https://notification.${{ env.PRODUCTION_DOMAIN }}/health" 2>/dev/null; then
              echo "‚úÖ Notification service is healthy!"
              exit 0
            fi
            
            echo "‚è≥ Attempt $attempt/$max_attempts failed, retrying in 30s..."
            sleep 30
            ((attempt++))
          done
          
          echo "‚ùå Health check failed after $max_attempts attempts"
          exit 1

  notify:
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ needs.build-and-deploy.result }}
          channel: '#deployments'
          text: |
            üîî Notification Service Deployment
            Status: ${{ needs.build-and-deploy.result }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 