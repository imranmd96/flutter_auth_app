name: üë§ User Service - Production CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'backend/user-service/**'
  pull_request:
    branches: [main]
    paths:
      - 'backend/user-service/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force production deployment'
        required: false
        default: false
        type: boolean

env:
  SERVICE_NAME: user-service
  SERVICE_PATH: backend/user-service
  REGISTRY: ghcr.io
  IMAGE_NAME: forkline/user-service
  PRODUCTION_URL: https://user.forkline.com

jobs:
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './backend/user-service'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  build-test:
    name: üß™ Build & Test
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: backend/user-service/package-lock.json
      - name: Install dependencies
        run: |
          cd backend/user-service
          npm ci
      - name: Run tests
        run: |
          cd backend/user-service
          npm run test || true
      - name: Build application
        run: |
          cd backend/user-service
          npm run build || true

  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to Railway
        run: |
          echo "üöÄ Deploying User Service to Railway..."
          curl -X POST "${{ secrets.RAILWAY_WEBHOOK_USER_SERVICE }}" \
            -H "Content-Type: application/json" \
            -d '{
              "service": "user-service",
              "environment": "production",
              "commit": "${{ github.sha }}"
            }'
      - name: Health check
        run: |
          echo "üîç Performing health check..."
          sleep 60
          curl -f -s "${{ env.PRODUCTION_URL }}/health" || echo "‚ùå Health check failed" 