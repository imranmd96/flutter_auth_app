name: 'GitHub CI/CD: Main Orchestrator - Production (Hybrid Approach)'

on:
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment of all services'
        required: false
        default: 'false'
        type: boolean
      deploy_services:
        description: 'Comma-separated list of services to deploy (or "all")'
        required: false
        default: ''
        type: string
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: forkline
  PRODUCTION_DOMAIN: forkline.com

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-services: ${{ steps.changes.outputs.services }}
      all-services: ${{ steps.changes.outputs.all_services }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: backend/**

      - name: Detect changed services
        id: changes
        run: |
          # All available services
          ALL_SERVICES="api-gateway,auth-service,payment-service,chat-service,notification-service,user-service,review-service,loyalty-service,media-service,restaurant-service,analytics-service,inventory-service,menu-service,search-service,order-service,booking-service,geolocation-service"
          
          # Detect changed services
          changed_services=""
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ $file =~ ^backend/([^/]+) ]]; then
              service="${BASH_REMATCH[1]}"
              if [[ ! "$changed_services" =~ $service ]]; then
                changed_services="$changed_services,$service"
              fi
            fi
          done
          
          # Remove leading comma
          changed_services="${changed_services#,}"
          
          # Handle force deploy or specific services
          if [[ "${{ inputs.force_deploy }}" == "true" || "${{ inputs.deploy_services }}" == "all" ]]; then
            changed_services="$ALL_SERVICES"
          elif [[ "${{ inputs.deploy_services }}" != "" && "${{ inputs.deploy_services }}" != "all" ]]; then
            changed_services="${{ inputs.deploy_services }}"
          fi
          
          echo "services=$changed_services" >> $GITHUB_OUTPUT
          echo "all_services=$ALL_SERVICES" >> $GITHUB_OUTPUT
          echo "üîç Changed services: $changed_services"

  deploy-services:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.changed-services != ''
    strategy:
      matrix:
        service: ${{ fromJson(format('["{0}"]', needs.detect-changes.outputs.changed-services)) }}
      fail-fast: false
      max-parallel: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read service configuration
        id: config
        run: |
          SERVICE="${{ matrix.service }}"
          CONFIG_FILE="backend/$SERVICE/ci-cd-config.yml"
          
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "‚ùå Configuration file not found: $CONFIG_FILE"
            exit 1
          fi
          
          # Parse YAML config file
          DISPLAY_NAME=$(grep "display_name:" "$CONFIG_FILE" | cut -d'"' -f2)
          LANGUAGE=$(grep "language:" "$CONFIG_FILE" | cut -d' ' -f2)
          PLATFORM=$(grep "deployment_platform:" "$CONFIG_FILE" | cut -d' ' -f2)
          DOCKER_FILE=$(grep "docker_file:" "$CONFIG_FILE" | cut -d' ' -f2)
          HEALTH_URL=$(grep "health_check_url:" "$CONFIG_FILE" | cut -d' ' -f2)
          ICON=$(grep "notification_icon:" "$CONFIG_FILE" | cut -d'"' -f2)
          SUBDOMAIN=$(grep "subdomain:" "$CONFIG_FILE" | cut -d' ' -f2)
          
          echo "display_name=$DISPLAY_NAME" >> $GITHUB_OUTPUT
          echo "language=$LANGUAGE" >> $GITHUB_OUTPUT
          echo "platform=$PLATFORM" >> $GITHUB_OUTPUT
          echo "docker_file=$DOCKER_FILE" >> $GITHUB_OUTPUT
          echo "health_url=$HEALTH_URL" >> $GITHUB_OUTPUT
          echo "icon=$ICON" >> $GITHUB_OUTPUT
          echo "subdomain=$SUBDOMAIN" >> $GITHUB_OUTPUT
          
          echo "üìã Service: $DISPLAY_NAME ($LANGUAGE ‚Üí $PLATFORM)"

      - name: Set up Node.js
        if: steps.config.outputs.language == 'nodejs'
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: backend/${{ matrix.service }}/package-lock.json

      - name: Set up Python
        if: steps.config.outputs.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Set up Java
        if: steps.config.outputs.language == 'java'
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Go
        if: steps.config.outputs.language == 'go'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install dependencies and test
        run: |
          cd backend/${{ matrix.service }}
          
          case "${{ steps.config.outputs.language }}" in
            "nodejs")
              npm ci
              npm test || echo "No tests found"
              npm run lint || echo "No linting configured"
              ;;
            "python")
              python -m pip install --upgrade pip
              pip install -r requirements.txt
              python -m pytest || echo "No tests found"
              flake8 . || echo "No linting configured"
              ;;
            "java")
              mvn test || echo "No tests found"
              mvn checkstyle:check || echo "No checkstyle configured"
              ;;
            "go")
              go test ./... || echo "No tests found"
              go vet ./... || echo "No linting configured"
              ;;
          esac

      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'backend/${{ matrix.service }}'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Set up Docker Buildx
        if: github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: backend/${{ matrix.service }}
          file: backend/${{ matrix.service }}/${{ steps.config.outputs.docker_file }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:latest
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Railway
        if: github.ref == 'refs/heads/main' && steps.config.outputs.platform == 'railway'
        uses: bervProject/railway-deploy@main
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: ${{ matrix.service }}
          variables: |
            DOCKER_IMAGE=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ github.sha }}
            NODE_ENV=production
            PRODUCTION_DOMAIN=${{ env.PRODUCTION_DOMAIN }}

      - name: Deploy to Render
        if: github.ref == 'refs/heads/main' && steps.config.outputs.platform == 'render'
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets[format('RENDER_{0}_ID', upper(replace(matrix.service, '-', '_')))] }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

      - name: Health check
        if: github.ref == 'refs/heads/main'
        run: |
          echo "‚è≥ Waiting for ${{ steps.config.outputs.display_name }} deployment..."
          sleep 30
          
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if curl -f --max-time 10 "${{ steps.config.outputs.health_url }}" 2>/dev/null; then
              echo "‚úÖ ${{ steps.config.outputs.display_name }} is healthy!"
              exit 0
            fi
            
            echo "‚è≥ Attempt $attempt/$max_attempts failed, retrying in 30s..."
            sleep 30
            ((attempt++))
          done
          
          echo "‚ùå Health check failed for ${{ steps.config.outputs.display_name }} after $max_attempts attempts"
          exit 1

      - name: Service deployment notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            ${{ steps.config.outputs.icon }} ${{ steps.config.outputs.display_name }} Deployment
            Status: ${{ job.status }}
            Service: ${{ matrix.service }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            URL: https://${{ steps.config.outputs.subdomain }}.${{ env.PRODUCTION_DOMAIN }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  system-health-check:
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-services]
    if: always() && needs.detect-changes.outputs.changed-services != '' && github.ref == 'refs/heads/main'
    
    steps:
      - name: System-wide health check
        run: |
          echo "üîç Running system-wide health check..."
          
          # List of all service health endpoints
          services=(
            "api:https://api.${{ env.PRODUCTION_DOMAIN }}/health"
            "auth:https://auth.${{ env.PRODUCTION_DOMAIN }}/health"
            "payment:https://payment.${{ env.PRODUCTION_DOMAIN }}/health"
            "chat:https://chat.${{ env.PRODUCTION_DOMAIN }}/health"
            "notification:https://notification.${{ env.PRODUCTION_DOMAIN }}/health"
            "user:https://user.${{ env.PRODUCTION_DOMAIN }}/health"
            "review:https://review.${{ env.PRODUCTION_DOMAIN }}/health"
            "loyalty:https://loyalty.${{ env.PRODUCTION_DOMAIN }}/health"
            "media:https://media.${{ env.PRODUCTION_DOMAIN }}/health"
            "restaurant:https://restaurant.${{ env.PRODUCTION_DOMAIN }}/health"
            "analytics:https://analytics.${{ env.PRODUCTION_DOMAIN }}/health"
            "inventory:https://inventory.${{ env.PRODUCTION_DOMAIN }}/health"
            "menu:https://menu.${{ env.PRODUCTION_DOMAIN }}/health"
            "search:https://search.${{ env.PRODUCTION_DOMAIN }}/health"
            "order:https://order.${{ env.PRODUCTION_DOMAIN }}/health"
            "booking:https://booking.${{ env.PRODUCTION_DOMAIN }}/health"
            "geolocation:https://geolocation.${{ env.PRODUCTION_DOMAIN }}/health"
          )
          
          healthy_services=0
          total_services=${#services[@]}
          
          for service in "${services[@]}"; do
            name=$(echo "$service" | cut -d':' -f1)
            url=$(echo "$service" | cut -d':' -f2-)
            
            if curl -f --max-time 10 "$url" 2>/dev/null; then
              echo "‚úÖ $name service is healthy"
              ((healthy_services++))
            else
              echo "‚ùå $name service is unhealthy"
            fi
          done
          
          echo "üìä System Health: $healthy_services/$total_services services healthy"
          
          if [ $healthy_services -eq $total_services ]; then
            echo "üéâ All services are healthy!"
          else
            echo "‚ö†Ô∏è Some services are unhealthy"
          fi

  final-notification:
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-services, system-health-check]
    if: always() && needs.detect-changes.outputs.changed-services != ''
    
    steps:
      - name: Final deployment notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ needs.deploy-services.result }}
          channel: '#deployments'
          text: |
            üöÄ **ForkLine Deployment Complete**
            
            **Status:** ${{ needs.deploy-services.result }}
            **Services Deployed:** ${{ needs.detect-changes.outputs.changed-services }}
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Author:** ${{ github.actor }}
            **System Health:** ${{ needs.system-health-check.result }}
            
            üåê **Production URLs:**
            ‚Ä¢ API Gateway: https://api.${{ env.PRODUCTION_DOMAIN }}
            ‚Ä¢ Auth Service: https://auth.${{ env.PRODUCTION_DOMAIN }}
            ‚Ä¢ Payment Service: https://payment.${{ env.PRODUCTION_DOMAIN }}
            ‚Ä¢ And 14 more services...
            
            üìä **Dashboard:** https://dashboard.${{ env.PRODUCTION_DOMAIN }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 