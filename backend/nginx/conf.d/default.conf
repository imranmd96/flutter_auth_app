# ============================================================================
# Rate Limiting Configuration
# ============================================================================
# limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

# ============================================================================
# Upstream Configuration
# ============================================================================
upstream api_backend {
    server api-gateway:3000;
    keepalive 32;
}

# ============================================================================
# Logging Configuration
# ============================================================================
log_format detailed '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';

# ============================================================================
# HTTP Server Configuration (Redirect to HTTPS)
# ============================================================================
server {
    listen 80;
    server_name localhost www.forkline.com 127.0.0.1 [::1];
    
    # HTTP Access and Error Logs
    access_log /var/log/nginx/access_http.log detailed;
    error_log /var/log/nginx/error_http.log warn;
    
    # Redirect all HTTP traffic to HTTPS
    return 301 https://$server_name$request_uri;
}

# ============================================================================
# HTTPS Server Configuration
# ============================================================================
server {
    listen 443 ssl http2;
    server_name localhost www.forkline.com 127.0.0.1 [::1];

    # ============================================================================
    # SSL Configuration
    # ============================================================================
    ssl_certificate /etc/ssl/private/fullchain.pem;
    ssl_certificate_key /etc/ssl/private/privkey.pem;
    ssl_dhparam /etc/ssl/private/dhparam.pem;
    
    # SSL protocols and ciphers
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # SSL session settings
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # OCSP Stapling
    ssl_stapling off;
    ssl_stapling_verify off;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # ============================================================================
    # Security Headers
    # ============================================================================
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'; frame-ancestors 'self';" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

    # ============================================================================
    # Logging Configuration
    # ============================================================================
    # HTTPS Access and Error Logs
    access_log /var/log/nginx/access.log detailed;
    error_log /var/log/nginx/error.log warn;

    # ============================================================================
    # Proxy Settings
    # ============================================================================
    proxy_http_version 1.1;
    proxy_cache_bypass $http_upgrade;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Timeouts
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    # ============================================================================
    # Static Content
    # ============================================================================
    # Welcome page
    location = /welcome {
        alias /usr/share/nginx/html/welcome.html;
        default_type text/html;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }

    # ============================================================================
    # API Endpoints
    # ============================================================================
    # Main API endpoint
    location / {
        # Rate limiting
        # limit_req zone=api_limit burst=20 nodelay;
        
        # Proxy pass with error handling
        proxy_pass http://api_backend;
        proxy_next_upstream error timeout http_502 http_503 http_504;
        proxy_next_upstream_tries 3;
        proxy_next_upstream_timeout 10s;
        
        # CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        
        # Handle OPTIONS method
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        # Custom error response for API downtime
        error_page 502 503 504 = @api_down;
    }

    # API down handler
    location @api_down {
        default_type application/json;
        return 503 '{"status": "error", "message": "API service is currently unavailable. Please try again later.", "code": "SERVICE_UNAVAILABLE"}';
    }

    # Health check endpoint
    location /nginx-health {
        access_log off;
        return 200 'healthy\n';
    }

    # API status endpoint
    location /api-status {
        access_log off;
        proxy_pass http://api_backend;
        proxy_next_upstream error timeout http_502 http_503 http_504;
        proxy_next_upstream_tries 1;
        proxy_next_upstream_timeout 5s;
        error_page 502 503 504 = @api_down;
    }

    # ============================================================================
    # Security
    # ============================================================================
    # Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # ============================================================================
    # Error Pages
    # ============================================================================
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
} 