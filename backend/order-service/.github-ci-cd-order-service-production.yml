name: üõçÔ∏è Order Service - Production CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'backend/order-service/**'
  pull_request:
    branches: [main]
    paths:
      - 'backend/order-service/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force production deployment'
        required: false
        default: false
        type: boolean

env:
  SERVICE_NAME: order-service
  SERVICE_PATH: backend/order-service
  REGISTRY: ghcr.io
  IMAGE_NAME: forkline/order-service
  PRODUCTION_URL: https://order.forkline.com

jobs:
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './backend/order-service'
          format: 'sarif'
          output: 'trivy-results.sarif'

  build-test:
    name: üß™ Build & Test
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        java-version: [17, 21]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Java ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          cache: 'maven'
      - name: Build with Maven
        run: |
          cd backend/order-service
          mvn clean compile
      - name: Run tests
        run: |
          cd backend/order-service
          mvn test || true
      - name: Package application
        run: |
          cd backend/order-service
          mvn package -DskipTests

  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to Render
        run: |
          echo "üöÄ Deploying Order Service to Render..."
          curl -X POST "${{ secrets.RENDER_WEBHOOK_ORDER_SERVICE }}" \
            -H "Content-Type: application/json" \
            -d '{"service": "order-service", "environment": "production"}'
      - name: Health check
        run: |
          echo "üîç Performing health check..."
          sleep 120
          curl -f -s "${{ env.PRODUCTION_URL }}/health" || echo "‚ùå Health check failed" 